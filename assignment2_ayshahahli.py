# -*- coding: utf-8 -*-
"""Assignment2_AyshahAhli

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qbgXqdYp5d8LItrrunM7yrEDl2zkojWF
"""

# This line introduces the museum_section class

class MuseumSection:
    def __init__(self, id, section_type, name, capacity):
        self.__id = id
        self.__section_type = section_type
        self.__name = name
        self.__capacity = capacity
        self.__current_exhibitions = []

    #These lines identify the getter methods
    def get_id(self):
        return self.__id

    def get_section_type(self):
        return self.__section_type

    def get_name(self):
        return self.__name

    def get_capacity(self):
        return self.__capacity

    def get_current_exhibitions(self):
        return self.__current_exhibitions

    #these lines identify the setter methods
    def set_id(self, id):
        self.__id = id

    def set_section_type(self, section_type):
        self.__section_type = section_type

    def set_name(self, name):
        self.__name = name

    def set_capacity(self, capacity):
        self.__capacity = capacity

    def add_exhibition(self, exhibition):
        self.__current_exhibitions.append(exhibition)

    def remove_exhibition(self, exhibition_id):
        self.__current_exhibitions = [exhibition for exhibition in self.__current_exhibitions if exhibition.get_id() != exhibition_id]

    def list_current_artworks(self):
        for exhibition in self.__current_exhibitions:
            print(f'Exhibition: {exhibition.get_name()}')
            for artwork in exhibition.get_artworks():
                print(f' - Artwork: {artwork.get_title()} by {artwork.get_artist()}')

    def update_section_details(self, new_details):
        # Placeholder for actual update logic
        pass

    def get_section_information(self):
        # Placeholder for returning detailed information
        pass

# This line introduces the artwork class

class Artwork:
    def __init__(self, id, title, artist, date_of_creation, historical_significance, location_id):
        self.__id = id
        self.__title = title
        self.__artist = artist
        self.__date_of_creation = date_of_creation
        self.__historical_significance = historical_significance
        self.__location_id = location_id

    #these lines identify the getter methods
    def get_id(self):
        return self.__id

    def get_title(self):
        return self.__title

    def get_artist(self):
        return self.__artist

    def get_date_of_creation(self):
        return self.__date_of_creation

    def get_historical_significance(self):
        return self.__historical_significance

    def get_location_id(self):
        return self.__location_id

    #these lines identify the setter methods
    def set_id(self, id):
        self.__id = id

    def set_title(self, title):
        self.__title = title

    def set_artist(self, artist):
        self.__artist = artist

    def set_date_of_creation(self, date_of_creation):
        self.__date_of_creation = date_of_creation

    def set_historical_significance(self, historical_significance):
        self.__historical_significance = historical_significance

    def set_location_id(self, location_id):
        self.__location_id = location_id

# This line introduces the exhibition class

class Exhibition:
    def __init__(self, id, name, start_date, end_date, location_id):
        self.__id = id
        self.__name = name
        self.__start_date = start_date
        self.__end_date = end_date
        self.__location_id = location_id
        self.__artworks = []

    #these lines identify the getter methods
    def get_id(self):
        return self.__id

    def get_name(self):
        return self.__name

    def get_start_date(self):
        return self.__start_date

    def get_end_date(self):
        return self.__end_date

    def get_location_id(self):
        return self.__location_id

    def get_artworks(self):
        return self.__artworks

    #these lines identify the setter methods
    def set_id(self, id):
        self.__id = id

    def set_name(self, name):
        self.__name = name

    def set_start_date(self, start_date):
        self.__start_date = start_date

    def set_end_date(self, end_date):
        self.__end_date = end_date

    def set_location_id(self, location_id):
        self.__location_id = location_id

    def add_artwork(self, artwork):
        if artwork not in self.__artworks:
            self.__artworks.append(artwork)

    def remove_artwork(self, artwork_id):
        self.__artworks = [artwork for artwork in self.__artworks if artwork.get_id() != artwork_id]

# This line introduces the event class

class Event:
    def __init__(self, id, title, event_type, start_time, end_time, description, location_id, ticket_price):
        self.__id = id
        self.__title = title
        self.__event_type = event_type
        self.__start_time = start_time
        self.__end_time = end_time
        self.__description = description
        self.__location_id = location_id
        self.__ticket_price = ticket_price

    #these lines identify the getter methods
    def get_id(self):
        return self.__id

    def get_title(self):
        return self.__title

    def get_event_type(self):
        return self.__event_type

    def get_start_time(self):
        return self.__start_time

    def get_end_time(self):
        return self.__end_time

    def get_description(self):
        return self.__description

    def get_location_id(self):
        return self.__location_id

    def get_ticket_price(self):
        return self.__ticket_price

    #these lines identify the setter methods
    def set_id(self, id):
        self.__id = id

    def set_title(self, title):
        self.__title = title

    def set_event_type(self, event_type):
        self.__event_type = event_type

    def set_start_time(self, start_time):
        self.__start_time = start_time

    def set_end_time(self, end_time):
        self.__end_time = end_time

    def set_description(self, description):
        self.__description = description

    def set_location_id(self, location_id):
        self.__location_id = location_id

    def set_ticket_price(self, ticket_price):
        self.__ticket_price = ticket_price

# This line introduces the visitor class

class Visitor:
    def __init__(self, id, name, age, visitor_type, nationality, email_address):
        self.__id = id
        self.__name = name
        self.__age = age
        self.__visitor_type = visitor_type
        self.__nationality = nationality
        self.__email_address = email_address

    #these lines identify the getter methods
    def get_id(self):
        return self.__id

    def get_name(self):
        return self.__name

    def get_age(self):
        return self.__age

    def get_visitor_type(self):
        return self.__visitor_type

    def get_nationality(self):
        return self.__nationality

    def get_email_address(self):
        return self.__email_address

    #these lines identify the setter methods
    def set_id(self, id):
        self.__id = id

    def set_name(self, name):
        self.__name = name

    def set_age(self, age):
        self.__age = age

    def set_visitor_type(self, visitor_type):
        self.__visitor_type = visitor_type

    def set_nationality(self, nationality):
        self.__nationality = nationality

    def set_email_address(self, email_address):
        self.__email_address = email_address

# This line introduces the ticket class

class Ticket:
    def __init__(self, id, visitor_id, event_id, date_of_issue, price_with_vat, is_paid):
        self.__id = id
        self.__visitor_id = visitor_id
        self.__event_id = event_id
        self.__date_of_issue = date_of_issue
        self.__price_with_vat = price_with_vat
        self.__is_paid = is_paid

    #these lines identify the getter methods
    def get_id(self):
        return self.__id

    def get_visitor_id(self):
        return self.__visitor_id

    def get_event_id(self):
        return self.__event_id

    def get_date_of_issue(self):
        return self.__date_of_issue

    def get_price_with_vat(self):
        return self.__price_with_vat

    def get_is_paid(self):
        return self.__is_paid

    #these lines identify the setter methods
    def set_id(self, id):
        self.__id = id

    def set_visitor_id(self, visitor_id):
        self.__visitor_id = visitor_id

    def set_event_id(self, event_id):
        self.__event_id = event_id

    def set_date_of_issue(self, date_of_issue):
        self.__date_of_issue = date_of_issue

    def set_price_with_vat(self, price_with_vat):
        self.__price_with_vat = price_with_vat

    def set_is_paid(self, is_paid):
        self.__is_paid = is_paid

# This line introduces the tour_group class

class TourGroup:
    def __init__(self, id, guide_id, tour_date, visitor_ids, max_capacity, booked_slots):
        self.__id = id
        self.__guide_id = guide_id
        self.__tour_date = tour_date
        self.__visitor_ids = visitor_ids
        self.__max_capacity = max_capacity
        self.__booked_slots = booked_slots

    #these lines identify the getter methods
    def get_id(self):
        return self.__id

    def get_guide_id(self):
        return self.__guide_id

    def get_tour_date(self):
        return self.__tour_date

    def get_visitor_ids(self):
        return self.__visitor_ids

    def get_max_capacity(self):
        return self.__max_capacity

    def get_booked_slots(self):
        return self.__booked_slots

    #these lines identify the setter methods
    def set_id(self, id):
        self.__id = id

    def set_guide_id(self, guide_id):
        self.__guide_id = guide_id

    def set_tour_date(self, tour_date):
        self.__tour_date = tour_date

    def set_visitor_ids(self, visitor_ids):
        self.__visitor_ids = visitor_ids

    def set_max_capacity(self, max_capacity):
        self.__max_capacity = max_capacity

    def set_booked_slots(self, booked_slots):
        self.__booked_slots = booked_slots

    def create_tour_group(self):
        pass

    def add_visitor_to_tour(self, visitor_id):
        if self.__booked_slots < self.__max_capacity:
            self.__visitor_ids.append(visitor_id)
            self.__booked_slots += 1

    def remove_visitor_from_tour(self, visitor_id):
        if visitor_id in self.__visitor_ids:
            self.__visitor_ids.remove(visitor_id)
            self.__booked_slots -= 1

    def get_tour_details(self):
        # Placeholder for actual tour detail retrieval logic
        pass

    def update_tour_date(self, new_date):
        self.__tour_date = new_date

# Test Case 1
class Artwork:
    def __init__(self, id, title, artist, date_of_creation, historical_significance, location_id):
        self.__id = id
        self.__title = title
        self.__artist = artist
        self.__date_of_creation = date_of_creation
        self.__historical_significance = historical_significance
        self.__location_id = location_id

    def get_id(self):
        return self.__id

    def get_title(self):
        return self.__title

    def get_artist(self):
        return self.__artist

    def get_date_of_creation(self):
        return self.__date_of_creation

    def get_historical_significance(self):
        return self.__historical_significance

    def get_location_id(self):
        return self.__location_id

# Run Test Cases
test_add_new_art_to_museum()

# Test Case 2
class Visitor:
    def __init__(self, id, name, age, visitor_type, national_id, email_address):
        self.__id = id
        self.__name = name
        self.__age = age
        self.__visitor_type = visitor_type
        self.__national_id = national_id
        self.__email_address = email_address

    def get_id(self):
        return self.__id

    def get_name(self):
        return self.__name

class Event:
    def __init__(self, id, title, event_type, start_time, end_time, description, location_id, ticket_price):
        self.__id = id
        self.__title = title
        self.__start_time = start_time

    def get_id(self):
        return self.__id

    def get_title(self):
        return self.__title

    def get_start_time(self):
        return self.__start_time

class Ticket:
    def __init__(self, id, visitor_id, event_id, date_of_issue, event_date, price_with_vat, is_paid="No"):
        self.__id = id
        self.__event_date = event_date
        self.__price_with_vat = price_with_vat
        self.__is_paid = is_paid

    def get_id(self):
        return self.__id

    def get_event_date(self):
        return self.__event_date

    def get_price_with_vat(self):
        return self.__price_with_vat

    def set_is_paid(self, is_paid):
        self.__is_paid = is_paid

def test_purchase_tickets_for_event():
    print("\nEnter the visitor details to purchase a ticket for an event:")
    visitor_id = input("Visitor ID: ")
    name = input("Name: ")
    age = input("Age: ")
    visitor_type = input("Visitor Type: ")
    national_id = input("National ID: ")
    email_address = input("Email Address: ")

    visitor = Visitor(visitor_id, name, int(age), visitor_type, national_id, email_address)
    event = Event("E01", "The Night Watch", "Exhibition", "2024-04-01", "2024-04-30", "Rembrandt's masterpiece.", "Museum 1", 25.00)
    ticket = Ticket("T01", visitor.get_id(), event.get_id(), "2024-03-01", event.get_start_time(), 25.00, "No")
    ticket.set_is_paid("Yes")

    print(f"\nTicket Details:\n- Ticket ID: {ticket.get_id()}\n- Visitor Name: {visitor.get_name()}\n- Event: {event.get_title()}\n- Event Date: {ticket.get_event_date()}\n- Price: ${ticket.get_price_with_vat()}")

# Running the second test case
test_purchase_tickets_for_event()